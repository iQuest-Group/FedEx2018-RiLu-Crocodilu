@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="divContainer">
    <div id="divChat" class="chatRoom">
        <div class="title">
            Bine ai venit, <span id='spanUser'></span>

        </div>
        <div class="content">
            <div id="discussion" class="chatWindow">
            </div>
            <div id="divusers" class="users">
            </div>
        </div>
        <div class="messageBar">
            <input class="textbox" type="text" id="message" />
            <input id="sendmessage" type="button" value="Trimite" />
        </div>
    </div>

    <input id="hdId" type="hidden" />
    <input id="displayname" type="hidden" />
</div>

@section scripts {
    <link rel="stylesheet" href="~/css/ChatStyle.css" />
    <link rel="stylesheet" href="~/css/JQueryUI/themes/base/jquery.ui.all.css" />
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    @*<script src="~/lib/jquery/dist/jquery.min.js"></script>*@

    <!--UI scripts -->
    <script src="~/lib/ui/jquery.ui.core.js"></script>
    <script src="~/lib/ui/jquery.ui.widget.js"></script>
    <script src="~/lib/ui/jquery.ui.mouse.js"></script>
    <script src="~/lib/ui/jquery.ui.draggable.js"></script>
    <script src="~/lib/ui/jquery.ui.resizable.js"></script>

    <!--Reference the SignalR library. -->
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
  
    <!--SignalR script to update the chat page and send messages.-->

    <script>
        $(function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();            

            // Create a function that the hub can call back to display messages.
            connection.on("addNewMessage", (name, message) => {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            });

            // Function to display all the connected users to the newly connected user
            connection.on("onConnectedAsync", (userId, connectionId, name, userList) => {
                $('#hdId').val(userId);
                $('#spanUser').html(name);
                code = '';
                for (i = 0; i < userList.length; i++) {
                    code = $('<a id="' + userList[i].UserId + '" class="user" >' + userList[i].User.lName + ' ' + userList[i].User.fName + '</a>');
                    $("#divusers").append(code);
                }
            });

            connection.on("onUserDisconnectedAsync", (userId, userName, userList) => {
                $('#' + userId).remove();
                var disc = $('<div class="disconnect">"' + userName + '" logged off.</div>');
                $(disc).hide();
                $('#divusers').prepend(disc);
                $(disc).fadeIn(200).delay(2000).fadeOut(200);
            });

            //Function to add the newly user to user list and inform other a new user is coneected
            connection.on("newUserConnected", (userId, userName, userList) => {
                code = $('<a id="' + userId + '" class="user" >' + userName + '</a>');
                $("#divusers").append(code);
            });

            connection.on("setChatWindow", (groupName, connectTo, name, userMessages) => {
                var div = '<div id="' + groupName + '" class="ui-widget-content draggable" rel="0">' +
                    '<div class="header">' +
                    '<div  style="float:right;">' +
                    '<img id="imgDelete"  style="cursor:pointer;" src="/Images/delete.png"/>' +
                    '</div>' +
                    '<span class="selText" rel="0">' + name + '</span>' +
                    '<span class="selText" id="msgTypeingName" rel="0"></span>' +
                    '</div>' +
                    '<div id="divMessage" class="messageArea">' +
                    '</div>' +
                    '<div class="buttonBar">' +
                    '<input id="txtPrivateMessage" class="msgText" type="text"   />' +
                    '<input id="btnSendMessage" class="submitButton button" type="button" value="Trimite"   />' +
                    '</div>' +
                    '<div id="scrollLength"></div>' +
                    '</div>';
                var $div = $(div);
                // DELETE BUTTON IMAGE
                $div.find('#imgDelete').click(function () {
                    $('#' + groupName).remove();
                });
                // Send Button event
                $div.find("#btnSendMessage").click(function () {
                    $textBox = $div.find("#txtPrivateMessage");
                    var msg = $textBox.val();
                    if (msg.length > 0) {
                        connection.invoke("SendPrivateMessage", msg, groupName, $('#hdId').val(), connectTo).catch(err => console.error(err.toString()));
                        //chat.server.sendPrivateMessage(msg, groupName, $('#hdId').val(), connectTo);
                        $textBox.val('');
                    }
                });
                $div.find("#txtPrivateMessage").keyup(function (e) {
                    if (e.which == 13) {
                        $div.find("#btnSendMessage").click();
                    }
                });
                AddDivToContainer($div);
                if ($('#' + groupName).length != 0) {
                    for (i = 0; i < userMessages.length; i++) {
                        var name = userMessages[i].Name;
                        $('#' + groupName).find('#divMessage').append('<div class="message"><span class="userName">' + name + '</span>: ' + userMessages[i].Message + '</div>');

                    }
                }
                $("#divMessage").animate({ scrollTop: $('#divMessage').prop("scrollHeight") }, 1000);

                $('#txtPrivateMessage').val('').focus();
            });

            connection.on("addMessage", (message, groupName, fromUserId, toUser, name, userMessages) => {
                if ($('#' + groupName).length == 0) {
                    chat.client.setChatWindow(groupName, fromUserId, name, userMessages);
                }
                $('#' + groupName).find('#divMessage').append('<div class="message"><span class="userName">' + name + '</span>: ' + message + '</div>');
                $("#divMessage").animate({ scrollTop: $('#divMessage').prop("scrollHeight") }, 1000);
            });

            function AddDivToContainer($div) {
                $('.divContainer').prepend($div);
                $div.draggable({
                    handle: ".header"
                    //stop: function () {
                    //}
                });
            }
            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@Context.Session.GetString("LastName") @Context.Session.GetString("FirstName")');
            // Set initial focus to message input box.
            $('#message').focus();

            $('#sendmessage').click(function () {
                // Call the Send method on the hub.
                connection.invoke("Send", $('#displayname').val(), $('#message').val()).catch(err => console.error(err.toString()));
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            });

            $('.users').on("click", ".user", function () {
                connection.invoke("CreateGroup", $('#hdId').val(), $(this).attr('id')).catch(err => console.error(err.toString()));
                return false;
            });
            $("#message").keypress(function (e) {
                if (e.which == 13) {
                    $('#sendmessage').click();
                }
            });

            connection.start().catch(err => console.error(err.toString()));
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}


